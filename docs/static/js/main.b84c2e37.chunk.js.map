{"version":3,"sources":["types/index.ts","components/infection-progress/data-chart.tsx","components/controls/population.tsx","components/controls/hospitals.tsx","components/controls/days.tsx","components/controls/social-contacts.tsx","components/infection-progress/infection-progress-controls.tsx","simulation/person.ts","simulation/utils.ts","simulation/virus.ts","simulation/simulation.ts","components/infection-progress/all-infected-distribution.tsx","App.tsx","index.tsx"],"names":["InfectionStage","DataChart","data","totals","itemWidth","Math","floor","length","days","map","day","death","total","severe","mild","incubation","healed","healthy","beds","hospitalBeds","i","Fragment","key","width","height","x","y","fill","general","byAge","style","color","dead","infected","toFixed","onlyMildSymptoms","hadSevereSymptoms","getLegend","tableData","ageGroup","age","deathRateAll","deathRateClosed","mildOnly","dataSource","columns","title","dataIndex","statsByAge","PopulationControl","population","handlePopulationChange","sliders","Array","_","group","defaultValue","min","max","marks","0","10000","onAfterChange","amount","HospitalsControl","handleHospitalsChange","1000","DaysControl","handleDaysChange","SocialContactsControl","contacts","handleContactsChange","20","InfectionControls","simulationData","setSimulationData","padding","socialContacts","infectedPopulation","Person","id","immune","hospitalized","infectionDay","currentStageDay","infectionsStage","nextStage","history","Map","nextDay","setStage","stage","set","heal","infect","this","uuid","Object","assign","probabilityFromAverage","average","value","exp","happenedToday","probability","random","getRandomSubArray","arr","subLength","Set","size","add","Covid19","characteristics","virusCharacteristics","transmissionChance","severeStateChance","person","averageMildToSevereDays","deathChance","averageSevereToDeathDays","recoverChance","averageMildToHealDays","averageSevereToHealDays","symptomsStartChance","averageIncubationDays","getNextStage","ageSevereChance","ageDeathChance","home","Simulation","virus","averageSocialContacts","progressInfection","progressSpread","run","push","filter","p","forEach","severeChance","occupiedBeds","defaultSimulation","AllInfectedDistribution","useState","flatMap","simulation","getTotals","display","totalInfected","has","get","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b84c2e37.chunk.js","sourcesContent":["export interface IPerson {\n    id: string\n    age: number\n    immune: boolean\n    infected: boolean\n    hospitalized: boolean\n    infectionDay: number\n    currentStageDay: number\n    infectionsStage: InfectionStage\n    history: Map<InfectionStage, number>\n    nextStage: InfectionStage\n\n    setStage: (stage: InfectionStage) => void\n    nextDay: () => void\n    heal: () => void\n    infect: () => void\n}\n\nexport enum InfectionStage {\n    healthy,\n    incubation,\n    mild,\n    severe,\n    death,\n    healed\n}\n\nexport interface IVirus {\n    transmissionChance: () => number\n    symptomsStartChance: (person: IPerson) => number\n    severeStateChance: (person: IPerson) => number\n    deathChance: (person: IPerson) => number\n    recoverChance: (person: IPerson) => number\n    getNextStage: (person: IPerson) => InfectionStage\n\n    characteristics: IVirusCharacteristics\n}\n\nexport interface IVirusCharacteristics {\n    transmissionChance: number,\n\n    averageIncubationDays: number,\n    averageMildToHealDays: number,\n    averageMildToSevereDays: number,\n    averageSevereToHealDays: number,\n    averageSevereToDeathDays: number,\n\n    ageSevereChance: number[],\n\n\n    ageDeathChance: {\n        hospitalized: number[],\n        home: number[]\n    }\n}\n\nexport interface ISimulation {\n    population: IPerson[]\n    virus: IVirus\n    day: number\n    hospitalBeds: number\n\n    nextDay: () => void\n    run: (days: number) => ISimulationHistory[]\n}\n\nexport interface ISimulationHistory {\n    total: number\n    incubation: number\n    mild: number\n    severe: number\n    death: number\n    healed: number\n    hospitalBeds: number\n}\n","import React from 'react'\nimport {Divider, Table} from 'antd'\n\nexport interface DayData {\n    total: number\n    incubation: number\n    mild: number\n    severe: number\n    death: number\n    healed: number\n    hospitalBeds: number\n}\n\nexport interface ITotals {\n    total: number,\n    dead: number,\n    healed: number,\n    infected: number,\n    onlyMildSymptoms: number,\n    hadSevereSymptoms: number\n}\n\nexport interface DataChartProps {\n    data: DayData[]\n    totals: {\n        byAge: ITotals[]\n        general: ITotals\n    }\n}\n\nexport const DataChart: React.FC<DataChartProps> = ({ data, totals }) => {\n    const width = 1000\n    const height = 500\n    const itemWidth = Math.floor(width / data.length)\n\n    const normalizedData = data.map(day => ({\n        death: day.death / day.total,\n        severe: day.severe / day.total,\n        mild: day.mild / day.total,\n        incubation: day.incubation / day.total,\n        healed: day.healed / day.total,\n        healthy: (day.total - day.death - day.severe - day.mild - day.incubation - day.healed) /day.total,\n        beds: day.hospitalBeds / day.total\n    }))\n\n    const days = normalizedData.map((day, i) => (\n      <React.Fragment key={i}>\n          <rect width={itemWidth} height={height * day.death} x={i * itemWidth}\n                y = {0} fill=\"black\"/>\n          <rect width={itemWidth} height={height * day.healthy} x={i * itemWidth}\n                y = {day.death * height} fill=\"grey\"/>\n          <rect width={itemWidth} height={height * day.healed} x={i * itemWidth}\n                y = {(day.death + day.healthy) * height} fill=\"green\"/>\n          <rect width={itemWidth} height={height * day.incubation} x={i * itemWidth}\n                y = {(day.death + day.healthy + day.healed) * height} fill=\"yellow\"/>\n          <rect width={itemWidth} height={height * day.mild} x={i * itemWidth}\n                y = {(day.death + day.healthy + day.healed + day.incubation) * height} fill=\"orange\"/>\n          <rect width={itemWidth} height={height * day.severe} x={i * itemWidth}\n                y = {(day.death + day.healthy + day.healed + day.incubation + day.mild) * height} fill=\"red\"/>\n          <rect width={itemWidth} height={2}  x={i * itemWidth} y={height - height * day.beds} fill=\"blue\"/>\n      </React.Fragment>\n    ))\n\n    const {general, byAge} = totals\n\n    return (\n        <div>\n            <svg width={width} height={height}>\n                {days}\n            </svg>\n            {getLegend(general)}\n            {statsByAge(byAge)}\n        </div>\n    )\n}\n\nfunction statsByAge(data: ITotals[]) {\n    const tableData = data.map((totals, ageGroup) => ({\n        key: ageGroup,\n        total: totals.total,\n        infected: totals.infected,\n        age: `${ageGroup*10}-${ageGroup*10 + 9}`,\n        deathRateAll: `${(100 * totals.dead / totals.infected).toFixed(1)}%`,\n        deathRateClosed: `${(100 * totals.dead / (totals.dead + totals.healed)).toFixed(1)}%`,\n        mildOnly: `${(100 * totals.onlyMildSymptoms / totals.infected).toFixed(1)}%`\n    }))\n\n    const columns = [{\n        key: 'age',\n        title: 'Age Group',\n        dataIndex: 'age'\n    }, {\n        key: 'infected',\n        title: 'Infected',\n        dataIndex: 'infected'\n    }, {\n        key: 'deathRateAll',\n        title: 'Mortality, all cases',\n        dataIndex: 'deathRateAll'\n    }, {\n        key: 'deathRateClosed',\n        title: 'Mortality, closed cases',\n        dataIndex: 'deathRateClosed'\n    }, {\n        key: 'mildOnly',\n        title: 'Mild cases',\n        dataIndex: 'mildOnly'\n    }]\n    return (\n        <Table dataSource={tableData} columns={columns}/>\n    )\n}\n\nfunction getLegend(data: ITotals) {\n    return (\n        <>\n            <h3 style={{ color: 'black' }}>\n                Dead: {data.dead},\n                {(100*data.dead/data.infected).toFixed(1)}% Dead/All Cases,\n                {(100*data.dead/(data.healed + data.dead)).toFixed(1)}% Dead/Closed Cases,\n            </h3>\n            <h3 style={{ color: 'green' }}>Healed: {data.healed}</h3>\n            <h3 style={{ color: 'grey'}}>\n                Not Infected: {data.total - data.infected}\n                ({(100*(1 - data.infected/data.total)).toFixed(1)}%)\n            </h3>\n            <h3 style={{ color: 'orange'}}>\n                Mild symptoms: {data.onlyMildSymptoms}\n                ({(100*data.onlyMildSymptoms/data.infected).toFixed(1)}%)\n            </h3>\n            <h3 style={{ color: 'red'}}>\n                Severe symptoms: {data.hadSevereSymptoms}\n                ({(100*data.hadSevereSymptoms/data.infected).toFixed(1)}%)\n            </h3>\n            <h3 style={{ color: 'yellow'}}>Incubation</h3>\n            <Divider />\n            <h3>Total population: {data.total}</h3>\n            <h3>Total cases: {data.infected}</h3>\n        </>\n    )\n}\n","import React from 'react'\nimport {Slider} from 'antd'\n\ninterface PopulationProps {\n    handlePopulationChange: (group: number, amount: number) => void\n    population: number[]\n}\n\nexport const PopulationControl: React.FC<PopulationProps> = ({ population, handlePopulationChange }) => {\n    const sliders = Array(10).fill(0)\n        .map((_, group) => (\n            <div key={group}>\n                <h4>age group: {group*10}-{group*10 + 9}</h4>\n                <Slider\n                    defaultValue={population[group]}\n                    min={0}\n                    max={1e4}\n                    marks={{0: 0, 10000: 10000}}\n                    onAfterChange={(amount) => handlePopulationChange(group, amount as number)}\n                />\n            </div>\n        ))\n    return (\n        <div>\n            <h3>Population:</h3>\n            {sliders}\n        </div>\n    )\n}\n","import React from 'react'\nimport {Slider} from 'antd'\n\ninterface HospitalsControlProps {\n    handleHospitalsChange: (amount: number) => void\n    hospitalBeds: number\n}\n\nexport const HospitalsControl: React.FC<HospitalsControlProps> = ({ hospitalBeds, handleHospitalsChange }) => {\n    return (\n        <div>\n            <h3>Hospital beds:</h3>\n            <Slider\n                defaultValue={hospitalBeds}\n                min={0}\n                max={1e3}\n                marks={{0: 0, 1000: 1000}}\n                onAfterChange={(amount) => handleHospitalsChange(amount as number)}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport {Slider} from 'antd'\n\ninterface DaysControlProps {\n    handleDaysChange: (amount: number) => void\n    days: number\n}\n\nexport const DaysControl: React.FC<DaysControlProps> = ({ days, handleDaysChange }) => {\n    return (\n        <div>\n            <h3>Simulation days:</h3>\n            <Slider\n                defaultValue={days}\n                min={0}\n                max={1e3}\n                marks={{0: 0, 1000: 1000}}\n                onAfterChange={(amount) => handleDaysChange(amount as number)}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport {Slider} from 'antd'\n\ninterface SocialContactsControlProps {\n    handleContactsChange: (amount: number) => void\n    contacts: number\n}\n\nexport const SocialContactsControl: React.FC<SocialContactsControlProps> = ({ contacts, handleContactsChange }) => {\n    return (\n        <div>\n            <h3>Average daily contacts:</h3>\n            <Slider\n                defaultValue={contacts}\n                min={0}\n                max={20}\n                marks={{0: 0, 20: 20}}\n                onAfterChange={(amount) => handleContactsChange(amount as number)}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport {PopulationControl} from '../controls/population'\nimport {HospitalsControl} from '../controls/hospitals'\nimport {Divider} from 'antd'\nimport {DaysControl} from '../controls/days'\nimport {SocialContactsControl} from '../controls/social-contacts'\n\nexport interface ISimulationData {\n    infectedPopulation: number[]\n    hospitalBeds: number\n    days: number\n    socialContacts: number\n}\n\nexport interface InfectionControlsProps {\n    simulationData: ISimulationData\n    setSimulationData: (data: ISimulationData) => void\n}\n\nexport const InfectionControls: React.FC<InfectionControlsProps> = ({ simulationData, setSimulationData }) => {\n    const handlePopulationChange = (group: number, amount: number) => {\n        const infectedPopulation = [...simulationData.infectedPopulation]\n        infectedPopulation[group] = amount\n\n        setSimulationData({\n            ...simulationData,\n            infectedPopulation\n        })\n    }\n\n    const handleHospitalsChange = (hospitalBeds: number) => setSimulationData({\n        ...simulationData,\n        hospitalBeds\n    })\n\n    const handleDaysChange = (days: number) => setSimulationData({\n        ...simulationData,\n        days\n    })\n    const handleContactsChange = (socialContacts: number) => setSimulationData({\n        ...simulationData,\n        socialContacts\n    })\n\n    return (\n        <div style={{width: '100%', padding: '0 30px'}}>\n            <h2>Controls</h2>\n            <HospitalsControl hospitalBeds={simulationData.hospitalBeds} handleHospitalsChange={handleHospitalsChange}/>\n            <Divider />\n            <DaysControl handleDaysChange={handleDaysChange} days={simulationData.days}/>\n            <Divider />\n            <SocialContactsControl handleContactsChange={handleContactsChange} contacts={simulationData.socialContacts}/>\n            <Divider />\n            <PopulationControl population={simulationData.infectedPopulation} handlePopulationChange={handlePopulationChange}/>\n        </div>\n    )\n}\n","import * as uuid from 'uuid'\nimport {InfectionStage, IPerson} from '../types'\n\nexport interface IPersonData {\n    age: number\n    immune?: boolean\n    infected?: boolean\n    hospitalized?: boolean\n    infectionDay?: number\n    currentStageDay?: number\n    infectionsStage?: InfectionStage\n    nextStage?: InfectionStage\n}\n\nexport class Person implements IPerson {\n    id: string\n    age: number\n    immune: boolean = false\n    infected: boolean = false\n    hospitalized: boolean = false\n    infectionDay: number = 0\n    currentStageDay: number = 0\n    infectionsStage: InfectionStage = InfectionStage.healthy\n    nextStage: InfectionStage = InfectionStage.incubation\n    history = new Map<InfectionStage, number>()\n\n    constructor(data: IPersonData) {\n        this.id = uuid.v4()\n        this.age = data.age\n        Object.assign(this, data)\n        if (this.infectionsStage === InfectionStage.incubation) {\n            this.nextStage = InfectionStage.mild\n        }\n    }\n\n    nextDay = () => {\n        if (this.infected) {\n            this.infectionDay++\n            this.currentStageDay++\n        }\n    }\n\n    setStage = (stage: InfectionStage) => {\n        this.history.set(this.infectionsStage, this.currentStageDay)\n        this.currentStageDay = 0\n        this.infectionsStage = stage\n    }\n\n    heal = () => {\n        this.setStage(InfectionStage.healed)\n        this.immune = true\n        this.infected = false\n        this.hospitalized = false\n    }\n\n    infect = () => {\n        if (this.immune || this.infected) return;\n\n        this.infected = true\n        this.infectionsStage = InfectionStage.incubation\n        this.nextStage = InfectionStage.mild\n        this.infectionDay = 0\n        this.currentStageDay = 0\n    }\n}\n","//todo use sigmoid or similar distribution.\nexport function probabilityFromAverage(average: number, value: number): number {\n    const max = 1.05 * average\n    return value < max ? Math.exp(value - max)  : 1;\n}\n\nexport function happenedToday(probability: number): boolean {\n    return Math.random() < probability\n}\n\nexport function getRandomSubArray<T>(arr: T[], subLength: number): T[] {\n    const set = new Set<number>()\n    while (set.size < subLength) {\n        set.add(Math.floor(Math.random() * arr.length))\n    }\n\n    return [...set].map(i => arr[i])\n}\n","import {InfectionStage, IPerson, IVirus, IVirusCharacteristics} from '../types'\nimport {happenedToday, probabilityFromAverage} from './utils'\n\nexport class Covid19 implements IVirus {\n    characteristics: IVirusCharacteristics\n\n    constructor(characteristics: IVirusCharacteristics = virusCharacteristics) {\n        this.characteristics = characteristics\n    }\n    transmissionChance = () => this.characteristics.transmissionChance\n\n    severeStateChance = (person: IPerson) => {\n        if (!person.infected || person.infectionsStage !== InfectionStage.mild) return 0\n\n        return person.nextStage === InfectionStage.severe\n            ? probabilityFromAverage(this.characteristics.averageMildToSevereDays, person.currentStageDay)\n            : 0\n    }\n\n    deathChance = (person: IPerson) => {\n        if (!person.infected || person.infectionsStage !== InfectionStage.severe) return 0\n\n        return person.nextStage === InfectionStage.death\n            ? probabilityFromAverage(this.characteristics.averageSevereToDeathDays, person.currentStageDay)\n            : 0\n    }\n\n    recoverChance = (person: IPerson) => {\n        if (!person.infected) return 1\n        if (person.infectionsStage === InfectionStage.incubation) return 0\n\n        if (person.infectionsStage === InfectionStage.mild) {\n            return person.nextStage === InfectionStage.healed\n                ? probabilityFromAverage(this.characteristics.averageMildToHealDays, person.currentStageDay)\n                : 0\n        }\n\n        if (person.infectionsStage === InfectionStage.severe) {\n            return person.nextStage === InfectionStage.healed\n                ? probabilityFromAverage(this.characteristics.averageSevereToHealDays, person.currentStageDay)\n                : 0\n        }\n\n        return 1\n    }\n\n    symptomsStartChance = (person: IPerson) => {\n        if (!person.infected || person.infectionsStage !== InfectionStage.incubation) return 0\n\n        return probabilityFromAverage(this.characteristics.averageIncubationDays, person.infectionDay)\n    }\n\n    getNextStage = (person: IPerson) => {\n        if (person.infectionsStage === InfectionStage.incubation) return InfectionStage.mild\n        if (person.infectionsStage === InfectionStage.mild) {\n            return happenedToday(this.characteristics.ageSevereChance[Math.floor(person.age / 10)])\n                ? InfectionStage.severe\n                : InfectionStage.healed\n        }\n        if (person.infectionsStage === InfectionStage.severe) {\n            const deathRates = person.hospitalized\n                ? this.characteristics.ageDeathChance.hospitalized\n                : this.characteristics.ageDeathChance.home\n\n            return happenedToday(deathRates[Math.floor(person.age / 10)])\n                ? InfectionStage.death\n                : InfectionStage.healed\n\n        }\n\n        //todo: Really? Maybe fix me\n        return InfectionStage.death\n    }\n}\n\nconst virusCharacteristics: IVirusCharacteristics = {\n    transmissionChance: .01,\n\n    averageIncubationDays: 10,\n    averageMildToHealDays: 14,\n    averageMildToSevereDays: 7,\n    averageSevereToHealDays: 21,\n    averageSevereToDeathDays: 5,\n\n    ageSevereChance: [.01, .03, .03, .03, .06, .14, .32, .5, .65, .7],\n\n    ageDeathChance: {\n        hospitalized: [.1, .15, .15, .15, .20, .25, .33, .45, .65, .7],\n        home: [.1, .25, .25, .25, .35, .4, .5, .65, .9, .95],\n//        home: [.3, .3, .3, .6, .6, .8, .9, .95, .95, 1]\n    }\n}\n","import {InfectionStage, IPerson, ISimulation, ISimulationHistory, IVirus} from '../types'\nimport {Covid19} from './virus'\nimport {getRandomSubArray, happenedToday} from './utils'\n\nexport class Simulation implements ISimulation{\n    hospitalBeds = 0\n    population: IPerson[]\n    virus: IVirus\n    day = 0\n    averageSocialContacts = 1\n\n    constructor(population: IPerson[] = [],\n                virus = new Covid19(),\n                hospitalBeds = 0,\n                socialContacts = 1\n    ) {\n        this.population = population\n        this.virus = virus\n        this.hospitalBeds = hospitalBeds\n        this.averageSocialContacts = socialContacts\n    }\n\n    nextDay = () => {\n        this.day++\n\n        this.progressInfection()\n        this.progressSpread()\n    }\n\n    run = (days: number): ISimulationHistory[] => {\n        const history = []\n        for (let day = 0; day < days; day++) {\n            this.nextDay();\n            history.push({\n                total: this.population.length,\n                incubation: this.population.filter(p => p.infectionsStage === InfectionStage.incubation).length,\n                mild: this.population.filter(p => p.infectionsStage === InfectionStage.mild).length,\n                severe: this.population.filter(p => p.infectionsStage === InfectionStage.severe).length,\n                death: this.population.filter(p => p.infectionsStage === InfectionStage.death).length,\n                healed: this.population.filter(p => p.infectionsStage === InfectionStage.healed).length,\n                hospitalBeds: this.hospitalBeds\n            })\n        }\n\n        return history\n    }\n\n    private progressInfection() {\n        this.population.forEach(person => {\n            if (!person.infected) return;\n            person.nextDay()\n\n            switch (person.infectionsStage) {\n                case InfectionStage.incubation: {\n                    const symptomsChance = this.virus.symptomsStartChance(person)\n                    if (happenedToday(symptomsChance)) {\n                        person.setStage(InfectionStage.mild)\n                        person.nextStage = this.virus.getNextStage(person)\n                    }\n                    break;\n                }\n\n                case InfectionStage.mild: {\n                    const severeChance = this.virus.severeStateChance(person)\n                    const recoverChance = this.virus.recoverChance(person)\n\n                    if (happenedToday(severeChance)) {\n                        person.setStage(InfectionStage.severe)\n                        const occupiedBeds = this.population.filter(person => person.hospitalized).length\n                        person.hospitalized = occupiedBeds < this.hospitalBeds\n                        person.nextStage = this.virus.getNextStage(person)\n                    } else if (happenedToday(recoverChance)) {\n                        person.heal()\n                    }\n                    break;\n                }\n\n                case InfectionStage.severe: {\n                    const deathChance = this.virus.deathChance(person)\n                    const recoverChance = this.virus.recoverChance(person)\n\n                    if (happenedToday(deathChance)) {\n                        person.setStage(InfectionStage.death)\n                    } else if (happenedToday(recoverChance)) {\n                        person.heal()\n                    }\n\n                    break;\n                }\n\n                default: break;\n            }\n        })\n    }\n\n    private progressSpread() {\n        this.population\n            .filter(p => p.infected)\n            .forEach(() => {\n                getRandomSubArray(this.population, this.averageSocialContacts)\n                    .forEach(p => happenedToday(this.virus.transmissionChance()) && p.infect())\n            })\n    }\n}\n\n","import React, {useState} from 'react'\nimport {InfectionStage, IPerson} from '../../types'\nimport {DataChart, ITotals} from './data-chart'\nimport {InfectionControls, ISimulationData} from './infection-progress-controls'\nimport {Person} from '../../simulation/person'\nimport {Simulation} from '../../simulation/simulation'\nimport {Covid19} from '../../simulation/virus'\nimport {getRandomSubArray} from '../../simulation/utils'\n\nexport interface AllInfectedDistributionProps {\n}\n\nconst defaultSimulation: ISimulationData = {\n    //Ukraine age population: https://ukrstat.org/uk/druk/publicat/kat_u/2019/zb/07/zb_rpnu2019.pdf page 26\n    //'1960529, 2 372 969, 2 147 481, 1 834 598, 2 200 523, 2 886 099, 3 563 993, 3 358 614, 3 069 863, 2 907 414, 2 743 877 , 3 110 494, 2 792 559, 2 389 627, 1 474 886, 1 382 695, 1 787 343'\n    //the last to numbers age given as 80+, my split is 1000000 and 787343\n    // [4333498, 3982079, 5086622, 6922607, 5977277, 5854371, 5182186, 2857581, 1000000, 787343]\n    infectedPopulation: [4333, 3982, 5086, 6922, 5977, 5854, 5182, 2857, 1000, 787],\n    hospitalBeds: 1000,\n    days: 200,\n    socialContacts: 5\n}\n\nexport const AllInfectedDistribution: React.FC<AllInfectedDistributionProps> = ({ }) => {\n    const [simulationData, setSimulationData] = useState<ISimulationData>(defaultSimulation)\n\n    const population = simulationData.infectedPopulation\n        .flatMap((amount, group) =>\n            Array(amount).fill(group * 10 + 5).map(age => new Person({ age }))\n        )\n\n    getRandomSubArray(population, 100).forEach(person => person.infect())\n\n    const simulation = new Simulation(population, new Covid19(), simulationData.hospitalBeds, simulationData.socialContacts)\n\n    const data = simulation.run(simulationData.days)\n\n    const totals = {\n        general: getTotals(simulation.population),\n        byAge: Array(10).fill(0).map((_, age) =>\n            getTotals(simulation.population.filter(p => p.age >= age * 10 && p.age < (age + 1) * 10))\n        )\n    }\n\n    return (\n        <div>\n            <h1>Naive Infection Distribution</h1>\n            <div style={{ display: 'flex' }}>\n            <DataChart data={data} totals={totals}/>\n            <InfectionControls simulationData={simulationData} setSimulationData={setSimulationData} />\n            </div>\n        </div>\n    )\n}\n\n\nfunction getTotals(population: IPerson[]): ITotals {\n    const totalInfected = population.filter(p => p.infectionsStage !== InfectionStage.healthy)\n\n    return {\n        total: population.length,\n        dead: population.filter(p => p.infectionsStage === InfectionStage.death).length,\n        infected: totalInfected.length,\n        healed: population.filter(p => p.infectionsStage === InfectionStage.healed).length,\n        onlyMildSymptoms: totalInfected.filter(p =>\n            p.history.has(InfectionStage.incubation) && !p.history.get(InfectionStage.severe)\n        ).length,\n        hadSevereSymptoms: totalInfected.filter(p =>\n            p.history.has(InfectionStage.severe) || p.infectionsStage === InfectionStage.severe\n        ).length\n\n    }\n}\n","import React from 'react';\nimport {AllInfectedDistribution} from './components/infection-progress/all-infected-distribution'\n\nfunction App() {\n  return (\n    <div>\n      <AllInfectedDistribution />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}