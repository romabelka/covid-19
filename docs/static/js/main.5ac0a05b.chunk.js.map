{"version":3,"sources":["types/index.ts","components/infection-progress/data-chart.tsx","components/controls/population.tsx","components/controls/hospitals.tsx","components/controls/days.tsx","components/controls/update.tsx","components/controls/social-contacts.tsx","components/infection-progress/infection-progress-controls.tsx","simulation/person.ts","simulation/utils.ts","simulation/virus.ts","simulation/simulation.ts","components/loader.tsx","components/infection-progress/all-infected-distribution.tsx","App.tsx","index.tsx"],"names":["InfectionStage","DataChart","data","totals","itemWidth","Math","floor","length","days","map","day","death","total","severe","mild","incubation","healed","healthy","beds","hospitalBeds","i","Fragment","key","width","height","x","y","fill","general","byAge","style","color","dead","infected","toFixed","onlyMildSymptoms","hadSevereSymptoms","severeNotHospitalized","getLegend","tableData","ageGroup","round","age","deathRateAll","deathRateClosed","mildOnly","dataSource","columns","title","dataIndex","statsByAge","PopulationControl","population","handlePopulationChange","sliders","Array","_","group","defaultValue","min","max","marks","0","10000","onAfterChange","amount","HospitalsControl","handleHospitalsChange","1000","DaysControl","handleDaysChange","Update","dirty","update","onClick","type","SocialContactsControl","contacts","handleContactsChange","handleChange","quarantineTime","quarantineAge","100","avContactsGeneral","20","avContactsQuarantine","InfectionControls","simulationData","setSimulationData","padding","display","justifyContent","socialContacts","infectedPopulation","Person","id","immune","hospitalized","infectionDay","currentStageDay","infectionsStage","nextStage","history","Map","nextDay","setStage","stage","set","heal","infect","this","uuid","Object","assign","probabilityFromAverage","average","value","exp","happenedToday","probability","random","getRandomSubArray","arr","subLength","Set","size","add","Covid19","characteristics","virusCharacteristics","transmissionChance","severeStateChance","person","averageMildToSevereDays","deathChance","averageSevereToDeathDays","recoverChance","averageMildToHealDays","averageSevereToHealDays","symptomsStartChance","averageIncubationDays","getNextStage","ageSevereChance","ageDeathChance","home","defaultQuarantine","Simulation","virus","progressInfection","progressSpread","run","FAincubation","FAmild","FAsevere","FAdeath","FAhealed","list","len","push","occupiedBeds","filter","p","severeChance","forEach","loaderStyle","position","top","left","right","bottom","alignItems","backgroundColor","zIndex","Loader","active","defaultSimulation","AllInfectedDistribution","useState","calculating","setCalculating","lastRunSimulationData","useRef","setData","setTotals","useLayoutEffect","setTimeout","flatMap","simulation","nextData","getTotals","current","totalInfected","has","get","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ac0a05b.chunk.js","sourcesContent":["export interface IPerson {\n    id: string\n    age: number\n    immune: boolean\n    infected: boolean\n    hospitalized: boolean\n    severeNotHospitalized: boolean\n    infectionDay: number\n    currentStageDay: number\n    infectionsStage: InfectionStage\n    history: Map<InfectionStage, number>\n    nextStage: InfectionStage\n\n    setStage: (stage: InfectionStage) => void\n    nextDay: () => void\n    heal: () => void\n    infect: () => void\n}\n\nexport enum InfectionStage {\n    healthy,\n    incubation,\n    mild,\n    severe,\n    death,\n    healed\n}\n\nexport interface IVirus {\n    transmissionChance: () => number\n    symptomsStartChance: (person: IPerson) => number\n    severeStateChance: (person: IPerson) => number\n    deathChance: (person: IPerson) => number\n    recoverChance: (person: IPerson) => number\n    getNextStage: (person: IPerson) => InfectionStage\n\n    characteristics: IVirusCharacteristics\n}\n\nexport interface IVirusCharacteristics {\n    transmissionChance: number,\n\n    averageIncubationDays: number,\n    averageMildToHealDays: number,\n    averageMildToSevereDays: number,\n    averageSevereToHealDays: number,\n    averageSevereToDeathDays: number,\n\n    ageSevereChance: number[],\n\n\n    ageDeathChance: {\n        hospitalized: number[],\n        home: number[]\n    }\n}\n\nexport interface ISimulation {\n    population: IPerson[]\n    virus: IVirus\n    day: number\n    hospitalBeds: number\n\n    nextDay: () => void\n    run: (days: number) => ISimulationHistory[]\n}\n\nexport interface ISimulationHistory {\n    total: number\n    incubation: number\n    mild: number\n    severe: number\n    death: number\n    healed: number\n    hospitalBeds: number\n}\n\nexport interface ISocialContacts {\n    quarantineAge: number\n    avContactsGeneral: number,\n    avContactsQuarantine: number\n    quarantineTime: number\n}\n","import React from 'react'\nimport {Divider, Table} from 'antd'\n\nexport interface DayData {\n    total: number\n    incubation: number\n    mild: number\n    severe: number\n    death: number\n    healed: number\n    hospitalBeds: number\n}\n\nexport interface ITotals {\n    total: number,\n    dead: number,\n    healed: number,\n    infected: number,\n    onlyMildSymptoms: number,\n    hadSevereSymptoms: number\n    severeNotHospitalized: number\n}\n\nexport interface DataChartProps {\n    data: DayData[]\n    totals: {\n        byAge: ITotals[]\n        general: ITotals\n    }\n}\n\nexport const DataChart: React.FC<DataChartProps> = ({ data, totals }) => {\n    const width = 1000\n    const height = 500\n    const itemWidth = Math.floor(width / data.length)\n\n    const normalizedData = data.map(day => ({\n        death: day.death / day.total,\n        severe: day.severe / day.total,\n        mild: day.mild / day.total,\n        incubation: day.incubation / day.total,\n        healed: day.healed / day.total,\n        healthy: (day.total - day.death - day.severe - day.mild - day.incubation - day.healed) /day.total,\n        beds: day.hospitalBeds / day.total\n    }))\n\n    const days = normalizedData.map((day, i) => (\n      <React.Fragment key={i}>\n          <rect width={itemWidth} height={height * day.death} x={i * itemWidth}\n                y = {0} fill=\"black\"/>\n          <rect width={itemWidth} height={height * day.healthy} x={i * itemWidth}\n                y = {day.death * height} fill=\"grey\"/>\n          <rect width={itemWidth} height={height * day.healed} x={i * itemWidth}\n                y = {(day.death + day.healthy) * height} fill=\"green\"/>\n          <rect width={itemWidth} height={height * day.incubation} x={i * itemWidth}\n                y = {(day.death + day.healthy + day.healed) * height} fill=\"yellow\"/>\n          <rect width={itemWidth} height={height * day.mild} x={i * itemWidth}\n                y = {(day.death + day.healthy + day.healed + day.incubation) * height} fill=\"orange\"/>\n          <rect width={itemWidth} height={height * day.severe} x={i * itemWidth}\n                y = {(day.death + day.healthy + day.healed + day.incubation + day.mild) * height} fill=\"red\"/>\n          <rect width={itemWidth} height={2}  x={i * itemWidth} y={height - height * day.beds} fill=\"blue\"/>\n      </React.Fragment>\n    ))\n\n    const {general, byAge} = totals\n\n    return (\n        <div>\n            <svg width={width} height={height}>\n                {days}\n            </svg>\n            {getLegend(general)}\n            {statsByAge(byAge)}\n        </div>\n    )\n}\n\nfunction statsByAge(data: ITotals[]) {\n    const tableData = data.map((totals, ageGroup) => ({\n        key: ageGroup,\n        total: totals.total,\n        infected: `${totals.infected} (${Math.round(100 * totals.infected / totals.total)}%)`,\n        dead: `${totals.dead} (${Math.round(100 * totals.dead / totals.total)}%)`,\n        age: `${ageGroup*10}-${ageGroup*10 + 9}`,\n        deathRateAll: `${(100 * totals.dead / totals.infected).toFixed(1)}%`,\n        deathRateClosed: `${(100 * totals.dead / (totals.dead + totals.healed)).toFixed(1)}%`,\n        mildOnly: `${(100 * totals.onlyMildSymptoms / totals.infected).toFixed(1)}%`\n    }))\n\n    const columns = [{\n        key: 'age',\n        title: 'Age Group',\n        dataIndex: 'age'\n    }, {\n        key: 'infected',\n        title: 'Infected',\n        dataIndex: 'infected'\n    }, {\n        key: 'dead',\n        title: 'Dead',\n        dataIndex: 'dead'\n    }, {\n        key: 'deathRateAll',\n        title: 'Mortality, all cases',\n        dataIndex: 'deathRateAll'\n    }, {\n        key: 'deathRateClosed',\n        title: 'Mortality, closed cases',\n        dataIndex: 'deathRateClosed'\n    }, {\n        key: 'mildOnly',\n        title: 'Mild cases',\n        dataIndex: 'mildOnly'\n    }]\n    return (\n        <Table dataSource={tableData} columns={columns}/>\n    )\n}\n\nfunction getLegend(data: ITotals) {\n    return (\n        <>\n            <h3 style={{ color: 'black' }}>\n                Dead: {data.dead},\n                {(100*data.dead/data.infected).toFixed(1)}% Dead/All Cases,\n                {(100*data.dead/(data.healed + data.dead)).toFixed(1)}% Dead/Closed Cases,\n            </h3>\n            <h3 style={{ color: 'green' }}>Healed: {data.healed}</h3>\n            <h3 style={{ color: 'grey'}}>\n                Not Infected: {data.total - data.infected}\n                ({(100*(1 - data.infected/data.total)).toFixed(1)}%)\n            </h3>\n            <h3 style={{ color: 'orange'}}>\n                Mild symptoms: {data.onlyMildSymptoms}\n                ({(100*data.onlyMildSymptoms/data.infected).toFixed(1)}%)\n            </h3>\n            <h3 style={{ color: 'red'}}>\n                Severe symptoms: {data.hadSevereSymptoms}\n                ({(100*data.hadSevereSymptoms/data.infected).toFixed(1)}%);\n                Not hospitalized: {data.severeNotHospitalized},\n                ({(100*data.severeNotHospitalized/data.hadSevereSymptoms).toFixed(1)}%);\n            </h3>\n            <h3 style={{ color: 'yellow'}}>Incubation</h3>\n            <Divider />\n            <h3>Total population: {data.total}</h3>\n            <h3>Total cases: {data.infected}</h3>\n        </>\n    )\n}\n","import React from 'react'\nimport {Slider} from 'antd'\n\ninterface PopulationProps {\n    handlePopulationChange: (group: number, amount: number) => void\n    population: number[]\n}\n\nexport const PopulationControl: React.FC<PopulationProps> = ({ population, handlePopulationChange }) => {\n    const sliders = Array(10).fill(0)\n        .map((_, group) => (\n            <div key={group}>\n                <h4>age group: {group*10}-{group*10 + 9}</h4>\n                <Slider\n                    defaultValue={population[group]}\n                    min={0}\n                    max={1e4}\n                    marks={{0: 0, 10000: 10000}}\n                    onAfterChange={(amount) => handlePopulationChange(group, amount as number)}\n                />\n            </div>\n        ))\n    return (\n        <div>\n            <h3>Population:</h3>\n            {sliders}\n        </div>\n    )\n}\n","import React from 'react'\nimport {Slider} from 'antd'\n\ninterface HospitalsControlProps {\n    handleHospitalsChange: (amount: number) => void\n    hospitalBeds: number\n}\n\nexport const HospitalsControl: React.FC<HospitalsControlProps> = ({ hospitalBeds, handleHospitalsChange }) => {\n    return (\n        <div>\n            <h3>Hospital beds:</h3>\n            <Slider\n                defaultValue={hospitalBeds}\n                min={0}\n                max={1e3}\n                marks={{0: 0, 1000: 1000}}\n                onAfterChange={(amount) => handleHospitalsChange(amount as number)}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport {Slider} from 'antd'\n\ninterface DaysControlProps {\n    handleDaysChange: (amount: number) => void\n    days: number\n}\n\nexport const DaysControl: React.FC<DaysControlProps> = ({ days, handleDaysChange }) => {\n    return (\n        <div>\n            <h3>Simulation days:</h3>\n            <Slider\n                defaultValue={days}\n                min={0}\n                max={1e3}\n                marks={{0: 0, 1000: 1000}}\n                onAfterChange={(amount) => handleDaysChange(amount as number)}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport {Button} from 'antd'\n\ninterface ButtonProps {\n    dirty: boolean\n    update: () => void\n}\n\nexport const Update: React.FC<ButtonProps> = ({ dirty, update }) => {\n    return dirty ? <Button onClick={update} type=\"primary\">Update chart</Button> : null\n}","import React from 'react'\nimport {Slider} from 'antd'\nimport {ISocialContacts} from '../../types'\n\ninterface SocialContactsControlProps {\n    handleContactsChange: (amount: ISocialContacts) => void\n    contacts: ISocialContacts\n}\n\nexport const SocialContactsControl: React.FC<SocialContactsControlProps> = ({ contacts, handleContactsChange }) => {\n    const handleChange = (data: Partial<ISocialContacts>) => {\n        handleContactsChange({\n            ...contacts,\n            ...data\n        })\n    }\n    return (\n        <div>\n            <h2>Quarantine:</h2>\n            <h4>Quarantine Days:</h4>\n            <Slider\n                defaultValue={contacts.quarantineTime}\n                min={0}\n                max={1000}\n                marks={{0: 0, 1000: 1000}}\n                onAfterChange={(days) => handleChange({ quarantineTime: days as number })}\n            />\n            <h4>Quarantine age:</h4>\n            <Slider\n                defaultValue={contacts.quarantineAge}\n                min={0}\n                max={100}\n                marks={{0: 0, 100: 100}}\n                onAfterChange={(age) => handleChange({ quarantineAge: age as number })}\n            />\n            <h4>Average Contacts:</h4>\n            <Slider\n                defaultValue={contacts.avContactsGeneral}\n                min={0}\n                max={20}\n                marks={{0: 0, 20: 20}}\n                onAfterChange={(contacts) => handleChange({ avContactsGeneral: contacts as number })}\n            />\n            <h4>Contacts Quarantined:</h4>\n            <Slider\n                defaultValue={contacts.avContactsQuarantine}\n                min={0}\n                max={20}\n                marks={{0: 0, 20: 20}}\n                onAfterChange={(contacts) => handleChange({ avContactsQuarantine: contacts as number })}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport {PopulationControl} from '../controls/population'\nimport {HospitalsControl} from '../controls/hospitals'\nimport {Divider} from 'antd'\nimport {DaysControl} from '../controls/days'\nimport {Update} from '../controls/update'\nimport {SocialContactsControl} from '../controls/social-contacts'\nimport {ISocialContacts} from '../../types'\n\nexport interface ISimulationData {\n    infectedPopulation: number[]\n    hospitalBeds: number\n    days: number\n    socialContacts: ISocialContacts\n}\n\nexport interface InfectionControlsProps {\n    simulationData: ISimulationData\n    setSimulationData: (data: ISimulationData) => void\n    dirty: boolean\n    update: () => void\n}\n\nexport const InfectionControls: React.FC<InfectionControlsProps> = ({\n    simulationData, setSimulationData, dirty, update\n}) => {\n    const handlePopulationChange = (group: number, amount: number) => {\n        const infectedPopulation = [...simulationData.infectedPopulation]\n        infectedPopulation[group] = amount\n\n        setSimulationData({\n            ...simulationData,\n            infectedPopulation\n        })\n    }\n\n    const handleHospitalsChange = (hospitalBeds: number) => setSimulationData({\n        ...simulationData,\n        hospitalBeds\n    })\n\n    const handleDaysChange = (days: number) => setSimulationData({\n        ...simulationData,\n        days\n    })\n    const handleContactsChange = (socialContacts: ISocialContacts) => setSimulationData({\n        ...simulationData,\n        socialContacts\n    })\n\n    return (\n        <div style={{width: '100%', padding: '0 30px'}}>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <h2>Controls</h2>\n                <Update dirty={dirty} update={update} />\n            </div>\n            <HospitalsControl hospitalBeds={simulationData.hospitalBeds} handleHospitalsChange={handleHospitalsChange}/>\n            <Divider />\n            <DaysControl handleDaysChange={handleDaysChange} days={simulationData.days}/>\n            <Divider />\n            <SocialContactsControl handleContactsChange={handleContactsChange} contacts={simulationData.socialContacts}/>\n            <Divider />\n            <PopulationControl population={simulationData.infectedPopulation} handlePopulationChange={handlePopulationChange}/>\n        </div>\n    )\n}\n","import * as uuid from 'uuid'\nimport {InfectionStage, IPerson} from '../types'\n\nexport interface IPersonData {\n    age: number\n    immune?: boolean\n    infected?: boolean\n    hospitalized?: boolean\n    infectionDay?: number\n    currentStageDay?: number\n    infectionsStage?: InfectionStage\n    nextStage?: InfectionStage\n}\n\nexport class Person implements IPerson {\n    id: string\n    age: number\n    immune: boolean = false\n    infected: boolean = false\n    hospitalized: boolean = false\n    severeNotHospitalized: boolean = false\n    infectionDay: number = 0\n    currentStageDay: number = 0\n    infectionsStage: InfectionStage = InfectionStage.healthy\n    nextStage: InfectionStage = InfectionStage.incubation\n    history = new Map<InfectionStage, number>()\n\n    constructor(data: IPersonData) {\n        this.id = uuid.v4()\n        this.age = data.age\n        Object.assign(this, data)\n        if (this.infectionsStage === InfectionStage.incubation) {\n            this.nextStage = InfectionStage.mild\n        }\n    }\n\n    nextDay = () => {\n        if (this.infected) {\n            this.infectionDay++\n            this.currentStageDay++\n        }\n    }\n\n    setStage = (stage: InfectionStage) => {\n        this.history.set(this.infectionsStage, this.currentStageDay)\n        this.currentStageDay = 0\n        this.infectionsStage = stage\n    }\n\n    heal = () => {\n        this.setStage(InfectionStage.healed)\n        this.immune = true\n        this.infected = false\n        this.hospitalized = false\n    }\n\n    infect = () => {\n        if (this.immune || this.infected) return;\n\n        this.infected = true\n        this.infectionsStage = InfectionStage.incubation\n        this.nextStage = InfectionStage.mild\n        this.infectionDay = 0\n        this.currentStageDay = 0\n    }\n}\n","//todo use sigmoid or similar distribution.\nexport function probabilityFromAverage(average: number, value: number): number {\n    const max = 1.05 * average\n    return value < max ? Math.exp(value - max)  : 1;\n}\n\nexport function happenedToday(probability: number): boolean {\n    return Math.random() < probability\n}\n\nexport function getRandomSubArray<T>(arr: T[], subLength: number): T[] {\n    const set = new Set<number>()\n    while (set.size < subLength) {\n        set.add(Math.floor(Math.random() * arr.length))\n    }\n\n    return [...set].map(i => arr[i])\n}\n","import {InfectionStage, IPerson, IVirus, IVirusCharacteristics} from '../types'\nimport {happenedToday, probabilityFromAverage} from './utils'\n\nexport class Covid19 implements IVirus {\n    characteristics: IVirusCharacteristics\n\n    constructor(characteristics: IVirusCharacteristics = virusCharacteristics) {\n        this.characteristics = characteristics\n    }\n    transmissionChance = () => this.characteristics.transmissionChance\n\n    severeStateChance = (person: IPerson) => {\n        if (!person.infected || person.infectionsStage !== InfectionStage.mild) return 0\n\n        return person.nextStage === InfectionStage.severe\n            ? probabilityFromAverage(this.characteristics.averageMildToSevereDays, person.currentStageDay)\n            : 0\n    }\n\n    deathChance = (person: IPerson) => {\n        if (!person.infected || person.infectionsStage !== InfectionStage.severe) return 0\n\n        return person.nextStage === InfectionStage.death\n            ? probabilityFromAverage(this.characteristics.averageSevereToDeathDays, person.currentStageDay)\n            : 0\n    }\n\n    recoverChance = (person: IPerson) => {\n        if (!person.infected) return 1\n        if (person.infectionsStage === InfectionStage.incubation) return 0\n\n        if (person.infectionsStage === InfectionStage.mild) {\n            return person.nextStage === InfectionStage.healed\n                ? probabilityFromAverage(this.characteristics.averageMildToHealDays, person.currentStageDay)\n                : 0\n        }\n\n        if (person.infectionsStage === InfectionStage.severe) {\n            return person.nextStage === InfectionStage.healed\n                ? probabilityFromAverage(this.characteristics.averageSevereToHealDays, person.currentStageDay)\n                : 0\n        }\n\n        return 1\n    }\n\n    symptomsStartChance = (person: IPerson) => {\n        if (!person.infected || person.infectionsStage !== InfectionStage.incubation) return 0\n\n        return probabilityFromAverage(this.characteristics.averageIncubationDays, person.infectionDay)\n    }\n\n    getNextStage = (person: IPerson) => {\n        if (person.infectionsStage === InfectionStage.incubation) return InfectionStage.mild\n        if (person.infectionsStage === InfectionStage.mild) {\n            return happenedToday(this.characteristics.ageSevereChance[Math.floor(person.age / 10)])\n                ? InfectionStage.severe\n                : InfectionStage.healed\n        }\n        if (person.infectionsStage === InfectionStage.severe) {\n            const deathRates = person.hospitalized\n                ? this.characteristics.ageDeathChance.hospitalized\n                : this.characteristics.ageDeathChance.home\n\n            return happenedToday(deathRates[Math.floor(person.age / 10)])\n                ? InfectionStage.death\n                : InfectionStage.healed\n\n        }\n\n        //todo: Really? Maybe fix me\n        return InfectionStage.death\n    }\n}\n\nconst virusCharacteristics: IVirusCharacteristics = {\n    transmissionChance: .01,\n\n    averageIncubationDays: 10,\n    averageMildToHealDays: 14,\n    averageMildToSevereDays: 7,\n    averageSevereToHealDays: 21,\n    averageSevereToDeathDays: 5,\n\n    ageSevereChance: [.01, .03, .03, .03, .06, .14, .32, .5, .65, .7],\n\n    ageDeathChance: {\n        hospitalized: [.1, .15, .15, .15, .20, .25, .33, .45, .65, .7],\n        home: [.1, .25, .25, .25, .35, .4, .5, .75, .9, .95],\n//        home: [.3, .3, .3, .6, .6, .8, .9, .95, .95, 1]\n    }\n}\n","import {InfectionStage, IPerson, ISimulation, ISimulationHistory, ISocialContacts, IVirus} from '../types'\nimport {Covid19} from './virus'\nimport {getRandomSubArray, happenedToday} from './utils'\nconst defaultQuarantine: ISocialContacts = {\n    avContactsGeneral: 10,\n    avContactsQuarantine: 1,\n    quarantineTime: 60,\n    quarantineAge: 0\n}\n\nexport class Simulation implements ISimulation{\n    hospitalBeds = 0\n    population: IPerson[]\n    virus: IVirus\n    day = 0\n    socialContacts: ISocialContacts = defaultQuarantine\n\n    constructor(population: IPerson[] = [],\n                virus = new Covid19(),\n                hospitalBeds = 0,\n                socialContacts: ISocialContacts = defaultQuarantine\n    ) {\n        this.population = population\n        this.virus = virus\n        this.hospitalBeds = hospitalBeds\n        this.socialContacts = socialContacts\n    }\n\n    nextDay = () => {\n        this.day++\n\n        this.progressInfection()\n        this.progressSpread()\n    }\n\n    run = (days: number): ISimulationHistory[] => {\n        const history = []\n        for (let day = 0; day < days; day++) {\n            this.nextDay();\n\n            let incubation  = 0;\n            let mild        = 0;\n            let severe      = 0;\n            let death       = 0;\n            let healed      = 0;\n\n            let FAincubation = InfectionStage.incubation;\n            let FAmild       = InfectionStage.mild;\n            let FAsevere     = InfectionStage.severe;\n            let FAdeath      = InfectionStage.death;\n            let FAhealed     = InfectionStage.healed;\n\n            for (let i = 0, list = this.population, len = list.length; i < len; i++) {\n                switch (list[i].infectionsStage) {\n                    case FAincubation:\n                        incubation++;\n                        break;\n                    case FAmild:\n                        mild++;\n                        break;\n                    case FAsevere:\n                        severe++;\n                        break;\n                    case FAdeath:\n                        death++;\n                        break;\n                    case FAhealed:\n                        healed++;\n                        break;\n                }\n            }\n            history.push({\n                total: this.population.length,\n                incubation,\n                mild,\n                severe,\n                death,\n                healed,\n                hospitalBeds: this.hospitalBeds\n            })\n        }\n\n        return history\n    }\n\n    private progressInfection() {\n\n        let occupiedBeds = this.population.filter(p => p.hospitalized).length;\n\n        for (let i = 0; i < this.population.length; i++) {\n            let person = this.population[i];\n            if (!person.infected) continue;\n            person.nextDay()\n\n            switch (person.infectionsStage) {\n                case InfectionStage.incubation: {\n                    const symptomsChance = this.virus.symptomsStartChance(person)\n                    if (happenedToday(symptomsChance)) {\n                        person.setStage(InfectionStage.mild)\n                        person.nextStage = this.virus.getNextStage(person)\n                    }\n                    break;\n                }\n\n                case InfectionStage.mild: {\n                    const severeChance = this.virus.severeStateChance(person)\n                    const recoverChance = this.virus.recoverChance(person)\n\n                    if (happenedToday(severeChance)) {\n                        person.setStage(InfectionStage.severe)\n                        if (occupiedBeds <= this.hospitalBeds) {\n                          person.hospitalized = true\n                          occupiedBeds++;\n                        } else {\n                            person.severeNotHospitalized = true\n                        }\n                        person.nextStage = this.virus.getNextStage(person)\n                    } else if (happenedToday(recoverChance)) {\n                        person.heal()\n                    }\n                    break;\n                }\n\n                case InfectionStage.severe: {\n                    const deathChance = this.virus.deathChance(person)\n                    const recoverChance = this.virus.recoverChance(person)\n\n                    if (happenedToday(deathChance)) {\n                        person.setStage(InfectionStage.death)\n                        person.hospitalized = false\n                    } else if (happenedToday(recoverChance)) {\n                        person.heal()\n                    }\n\n                    break;\n                }\n\n                default: break;\n            }\n        }\n    }\n\n    private progressSpread() {\n        const {quarantineAge, avContactsGeneral, avContactsQuarantine, quarantineTime} = this.socialContacts\n        for (let i = 0; i < this.population.length; i++) {\n            let person = this.population[i];\n            const contacts = this.day < quarantineTime && person.age >= quarantineAge\n                ? avContactsQuarantine\n                : avContactsGeneral\n\n            getRandomSubArray(this.population, contacts)\n                .forEach(p =>\n                    p.infected\n                    && happenedToday(this.virus.transmissionChance())\n                    && person.infect()\n                )\n        }\n    }\n}\n\n","import React from 'react'\n\nexport interface ILoaderProps {\n    active: boolean\n}\n\nconst loaderStyle: any = {\n    position: 'fixed',\n    top: 0, left: 0,\n    right: 0, bottom: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    zIndex: 999\n}\n\nexport const Loader: React.FC<ILoaderProps> = ({ active }) => {\n    if (!active) return null;\n\n    return <div style={loaderStyle}>\n        <h2 style={{color: '#fff'}}>Running Simulation, it can take a while...</h2>\n    </div>\n}\n","import React, {useState, useRef, useLayoutEffect, useEffect} from 'react'\nimport {InfectionStage, IPerson, ISimulationHistory} from '../../types'\nimport {DataChart, ITotals} from './data-chart'\nimport {InfectionControls, ISimulationData} from './infection-progress-controls'\nimport {Person} from '../../simulation/person'\nimport {Simulation} from '../../simulation/simulation'\nimport {Covid19} from '../../simulation/virus'\nimport {getRandomSubArray} from '../../simulation/utils'\nimport {Loader} from '../loader'\n\nexport interface AllInfectedDistributionProps {\n}\n\nconst defaultSimulation: ISimulationData = {\n    //Ukraine age population: https://ukrstat.org/uk/druk/publicat/kat_u/2019/zb/07/zb_rpnu2019.pdf page 26\n    //'1960529, 2 372 969, 2 147 481, 1 834 598, 2 200 523, 2 886 099, 3 563 993, 3 358 614, 3 069 863, 2 907 414, 2 743 877 , 3 110 494, 2 792 559, 2 389 627, 1 474 886, 1 382 695, 1 787 343'\n    //the last to numbers age given as 80+, my split is 1000000 and 787343\n    // [4333498, 3982079, 5086622, 6922607, 5977277, 5854371, 5182186, 2857581, 1000000, 787343]\n    infectedPopulation: [4333, 3982, 5086, 6922, 5977, 5854, 5182, 2857, 1000, 787],\n    //infectedPopulation: [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],\n    hospitalBeds: 150,\n    days: 700,\n    socialContacts: {\n        avContactsQuarantine: 1,\n        avContactsGeneral: 7,\n        quarantineAge: 60,\n        quarantineTime: 365\n    }\n}\n\nexport const AllInfectedDistribution: React.FC<AllInfectedDistributionProps> = ({ }) => {\n    const [calculating, setCalculating] = useState<boolean>(true)\n    const [simulationData, setSimulationData] = useState<ISimulationData>(defaultSimulation)\n    const lastRunSimulationData = useRef<ISimulationData>(simulationData)\n\n    const [data, setData] = useState<ISimulationHistory[] | null>(null)\n    const [totals, setTotals] = useState<any>(null)\n\n    const update = () => setCalculating(true)\n\n    const recalculate = () => {\n        if (!calculating) return;\n\n        //todo: I'll move this dirty hack to WebWorker\n        setTimeout(() => {\n            const population = simulationData.infectedPopulation\n                .flatMap((amount, group) =>\n                    Array(amount).fill(group * 10 + 5).map(age => new Person({ age }))\n                )\n\n            getRandomSubArray(population, 100).forEach(person => person.infect())\n\n            const simulation = new Simulation(population, new Covid19(), simulationData.hospitalBeds, simulationData.socialContacts)\n\n            const nextData = simulation.run(simulationData.days)\n            const totals = {\n                general: getTotals(simulation.population),\n                byAge: Array(10).fill(0).map((_, age) =>\n                    getTotals(simulation.population.filter(p => p.age >= age * 10 && p.age < (age + 1) * 10))\n                )\n            }\n            setCalculating(false)\n            setData(nextData)\n            setTotals(totals)\n            lastRunSimulationData.current = simulationData\n        })\n\n    }\n\n    useLayoutEffect(recalculate, [calculating])\n\n    const dirty = simulationData !== lastRunSimulationData.current\n\n    return (\n        <div>\n            <Loader active={calculating}/>\n            <h1>Naive Infection Distribution</h1>\n            <div style={{ display: 'flex' }}>\n            {data && totals && <DataChart data={data} totals={totals}/>}\n            <InfectionControls update={update} dirty={dirty} simulationData={simulationData} setSimulationData={setSimulationData} />\n            </div>\n        </div>\n    )\n}\n\n\nfunction getTotals(population: IPerson[]): ITotals {\n    const totalInfected = population.filter(p => p.infectionsStage !== InfectionStage.healthy)\n\n    return {\n        total: population.length,\n        dead: population.filter(p => p.infectionsStage === InfectionStage.death).length,\n        infected: totalInfected.length,\n        healed: population.filter(p => p.infectionsStage === InfectionStage.healed).length,\n        onlyMildSymptoms: totalInfected.filter(p =>\n            p.history.has(InfectionStage.incubation) && !p.history.get(InfectionStage.severe)\n        ).length,\n        hadSevereSymptoms: totalInfected.filter(p =>\n            p.history.has(InfectionStage.severe) || p.infectionsStage === InfectionStage.severe\n        ).length,\n        severeNotHospitalized: totalInfected.filter(p => p.severeNotHospitalized).length\n    }\n}\n","import React from 'react';\nimport {AllInfectedDistribution} from './components/infection-progress/all-infected-distribution'\n\nfunction App() {\n  return (\n    <div>\n      <AllInfectedDistribution />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}